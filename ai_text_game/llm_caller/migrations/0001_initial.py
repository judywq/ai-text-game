# Generated by Django 5.0.10 on 2025-02-09 15:23

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GameInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(choices=[('system', 'System'), ('user', 'User')], default='user', max_length=10)),
                ('system_input', models.TextField()),
                ('system_output', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameScenario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('genre', 'Genre'), ('sub-genre', 'Sub-Genre')], default='genre', help_text='Category of the scenario', max_length=100)),
                ('name', models.CharField(help_text='Name of the scenario (e.g., Fantasy, Sci-Fi)', max_length=100)),
                ('example', models.TextField(blank=True, help_text='Example movies/books/etc. of this genre/sub-genre')),
                ('order', models.IntegerField(default=10, help_text='Order in which scenarios are displayed (lower numbers first)')),
                ('is_active', models.BooleanField(default=True, help_text='Only active scenarios will be shown to users')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='GameStory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('genre', models.CharField(help_text='Genre of the story (e.g., Fantasy, Sci-Fi)', max_length=100)),
                ('title', models.CharField(help_text='Title of the story (generated or user-provided)', max_length=200)),
                ('status', models.CharField(choices=[('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('ABANDONED', 'Abandoned')], default='IN_PROGRESS', max_length=20)),
            ],
            options={
                'verbose_name_plural': 'Game stories',
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='LLMConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('purpose', models.CharField(choices=[('scene_generation', 'Scene Generation'), ('adventure_gameplay', 'Adventure Gameplay'), ('text_explanation', 'Text Explanation')], help_text='The purpose of this configuration', max_length=20)),
                ('system_prompt', models.TextField(help_text='The system prompt for the LLM.')),
                ('temperature', models.FloatField(default=0.7, help_text='Value between 0 and 2', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(2.0)])),
                ('is_active', models.BooleanField(default=False, help_text='Only one config can be active per purpose')),
            ],
            options={
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='LLMModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.IntegerField(default=10, help_text='Order of the model in the UI (smaller number comes first)')),
                ('name', models.CharField(help_text="The model name for calling the LLM API (e.g., gpt-4o-2024-11-20). Check <a href='https://platform.openai.com/docs/models#current-model-aliases' target='_blank'>OpenAI model list</a>.", max_length=200)),
                ('display_name', models.CharField(help_text='Display name for the model (e.g., GPT-4o)', max_length=200)),
                ('is_default', models.BooleanField(default=False, help_text='This model will be pre-selected in the UI')),
                ('is_active', models.BooleanField(default=True, help_text='Only active models will be listed in the UI')),
            ],
            options={
                'ordering': ['order'],
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='OpenAIKey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(help_text="OpenAI API Key (starts with 'sk-')", max_length=255)),
                ('name', models.CharField(help_text="A name to identify this key (e.g., 'Primary Key', 'Backup Key')", max_length=100)),
                ('is_active', models.BooleanField(default=True, help_text='Only active keys will be used')),
                ('order', models.IntegerField(default=10, help_text='Keys with lower order values will be used first', validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'OpenAI API Key',
                'verbose_name_plural': 'OpenAI API Keys',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='QuotaConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('daily_limit', models.IntegerField(default=10, help_text='Maximum number of requests per day for this model')),
            ],
            options={
                'get_latest_by': 'created_at',
            },
        ),
        migrations.CreateModel(
            name='TextExplanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('selected_text', models.TextField()),
                ('context_text', models.TextField()),
                ('explanation', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error', models.TextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
